SIZE = 8  # Size of the chessboard

def is_safe(board, row, col):
  """
  Checks if a queen can be placed at the given position without attacking other queens.

  Args:
      board: A list representing the chessboard (0 for empty, 1 for queen).
      row: The row index of the position.
      col: The column index of the position.

  Returns:
      True if the position is safe, False otherwise.
  """
  # Check row and column attacks
  for i in range(SIZE):
    if board[i][col] == 1 or board[row][i] == 1:
      return False

  # Check diagonal attacks
  i, j = row, col
  while i >= 0 and j >= 0:
    if board[i][j] == 1:
      return False
    i -= 1
    j -= 1

  i, j = row, col
  while i < SIZE and j >= 0:
    if board[i][j] == 1:
      return False
    i += 1
    j -= 1

  return True


def solve_n_queens(board, col):
  """
  Solves the n-queens problem using backtracking.

  Args:
      board: A list representing the chessboard (0 for empty, 1 for queen).
      col: The current column to place a queen.

  Returns:
      True if a solution is found, False otherwise.
  """
  if col >= SIZE:
    return True

  for row in range(SIZE):
    if is_safe(board, row, col):
      board[row][col] = 1
      if solve_n_queens(board, col + 1):
        return True
      board[row][col] = 0  # Backtrack

  return False


def print_solution(board):
  """
  Prints the chessboard with queens placed.
  """
  for row in board:
    print(" ".join(map(lambda x: "Q" if x == 1 else "-", row)))
  print()


if __name__ == "__main__":
  board = [[0 for _ in range(SIZE)] for _ in range(SIZE)]
  if solve_n_queens(board, 0):
    print("Solution found:")
    print_solution(board)
  else:
    print("No solution exists!")
